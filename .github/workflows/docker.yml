name: Docker

on:
  push:
    branches:
      - main

  release:
    types: [published]

  pull_request:
  
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Dynamically find the image name
        id: get-image-name
        run: |
          image_name=$(echo $GITHUB_REPOSITORY | cut -d '/' -f2 | sed -r 's/docker-//')
          echo "::set-output name=image_name::$image_name"
        
      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Run tests
        run: |
          if [ -f docker-compose.test.yml ]; then
            docker-compose --file docker-compose.test.yml build
            docker-compose --file docker-compose.test.yml run sut
          else
            docker build . --file Dockerfile --tag ${{ steps.get-image-name.outputs.image_name }}
          fi
          
      - name: Run the Anchore scan action itself with GitHub Advanced Security code scanning integration enabled
        uses: anchore/scan-action@v3
        id: scan
        with:
          image: "${{ steps.get-image-name.outputs.image_name }}"
          acs-report-enable: true
          fail-build: false
          severity-cutoff: high
          
      - name: Upload Anchore Scan Report
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }}

  push:
    needs: test

    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'release'

    permissions:
      contents: read
      packages: write

    steps:
      - name: Dynamically find the image name
        id: get-image-name
        run: |
          image_name=$(echo $GITHUB_REPOSITORY | cut -d '/' -f2 | sed -r 's/docker-//')
          echo "::set-output name=image_name::$image_name"
          
      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Build image
        run: docker build . --file Dockerfile --tag ${{ steps.get-image-name.outputs.image_name }}

      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Push image
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/${{ steps.get-image-name.outputs.image_name }}

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')name: Docker
2
​
3
on:
4
  push:
5
    branches:
6
      - main
7
​
8
  release:
9
    types: [published]
10
​
11
  # Run tests for any PRs.
12
  pull_request:
13
​
14
env:
15
  IMAGE_NAME: pyrhout
16
​
17
jobs:
18
  # Run tests.
19
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
20
  test:
21
    runs-on: ubuntu-latest
22
​
23
    steps:
24
      - uses: actions/checkout@v2
25
​
26
      - name: Run tests
27
        run: |
28
          if [ -f docker-compose.test.yml ]; then
29
            docker-compose --file docker-compose.test.yml build
30
            docker-compose --file docker-compose.test.yml run sut
31
          else
32
            docker build . --file Dockerfile
33
          fi
34
​
35
  # Push image to GitHub Packages.
36
  # See also https://docs.docker.com/docker-hub/builds/
37
  push:
38
    # Ensure test job passes before pushing image.
39
    needs: test
40
​
41
    runs-on: ubuntu-latest
42
    if: github.event_name == 'push' || github.event_name == 'release'

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "main" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          docker tag ${{ steps.get-image-name.outputs.image_name }} $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
